# -*- coding: utf-8 -*-
"""tradeACanalysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LD-RXPGEkuOjH144Mkk6INosXug5EH2q
"""

import pandas as pd
import numpy as np
import ast

def load_data(file_path):
    df = pd.read_csv(file_path)
    df.dropna(subset=['Trade_History'], inplace=True)
    df['Trade_History'] = df['Trade_History'].apply(ast.literal_eval)
    return df

def identify_trade_position(trade):
    side = trade['side'].lower()
    position_side = trade['positionSide'].lower()
    return f"{position_side}_{'open' if side == 'buy' else 'close'}"

def calculate_metrics(trade_history):
    if not trade_history:
        return {
            'ROI': 0,
            'PnL': 0,
            'Sharpe Ratio': 0,
            'Max Drawdown': 0,
            'Win Rate': 0,
            'Win Positions': 0,
            'Total Positions': 0
        }

    initial_balance = trade_history[0]['quantity']
    total_pnl = sum(trade['realizedProfit'] for trade in trade_history)
    roi = (total_pnl / initial_balance) * 100 if initial_balance else 0

    profits = [trade['realizedProfit'] for trade in trade_history if trade['realizedProfit'] > 0]
    losses = [trade['realizedProfit'] for trade in trade_history if trade['realizedProfit'] < 0]

    win_positions = len(profits)
    total_positions = len(trade_history)
    win_rate = (win_positions / total_positions) * 100 if total_positions else 0

    returns = np.array(profits + losses)
    sharpe_ratio = np.mean(returns) / np.std(returns) if np.std(returns) else 0

    equity_curve = np.cumsum(returns)
    max_drawdown = np.max(np.maximum.accumulate(equity_curve) - equity_curve) if len(equity_curve) > 0 else 0

    return {
        'ROI': roi,
        'PnL': total_pnl,
        'Sharpe Ratio': sharpe_ratio,
        'Max Drawdown': max_drawdown,
        'Win Rate': win_rate,
        'Win Positions': win_positions,
        'Total Positions': total_positions
    }

# Rank accounts based on metrics
def rank_accounts(df):
    metrics_list = []
    for _, row in df.iterrows():
        metrics = calculate_metrics(row['Trade_History'])
        metrics['Port_IDs'] = row['Port_IDs']
        metrics_list.append(metrics)

    df_metrics = pd.DataFrame(metrics_list)
    df_metrics['Score'] = df_metrics['ROI'] + df_metrics['Sharpe Ratio'] - df_metrics['Max Drawdown'] + df_metrics['Win Rate']
    df_ranked = df_metrics.sort_values(by='Score', ascending=False)

    return df_ranked.head(20)

def main(file_path, save_path):
    df = load_data(file_path)
    top_20_accounts = rank_accounts(df)
    print(top_20_accounts)

    # Save output to Google Drive
    top_20_accounts.to_csv(save_path, index=False)
    print(f"Results saved to: {save_path}")

file_path = "/content/drive/MyDrive/TRADES_CopyTr_90D_ROI.csv"
save_path = "/content/drive/My Drive/top_20_accounts.csv"  # Adjust based on your Google Drive structure
main(file_path, save_path)

